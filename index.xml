<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>AsCode - Terraform Alternative Syntax</title><link>https://ascode.run/</link><description>Recent content on AsCode - Terraform Alternative Syntax</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://ascode.run/index.xml" rel="self" type="application/rss+xml"/><item><title>Quick Install</title><link>https://ascode.run/docs/install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ascode.run/docs/install/</guid><description>AsCode is written in Go with support for multiple platforms.
The latest release can be found at GitHub Releases., currently provides pre-built binaries for the following:
Linux macOS (Darwin) Windows Binary (Cross-platform) Download the appropriate version for your platform from GitHub Releases.. Once downloaded, the binary can be run from anywhere. You don’t need to install it into a global location.
Ideally, you should install it somewhere in your PATH for easy use.</description></item><item><title>Getting Started</title><link>https://ascode.run/docs/getting-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ascode.run/docs/getting-started/</guid><description>TODO</description></item><item><title>Lexical elements</title><link>https://ascode.run/docs/starlark/lexical-elements/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ascode.run/docs/starlark/lexical-elements/</guid><description>A Starlark program consists of one or more modules. Each module is defined by a single UTF-8-encoded text file.
A complete grammar of Starlark can be found in grammar.txt. That grammar is presented piecemeal throughout this document in boxes such as this one, which explains the notation:
Grammar notation - lowercase and &amp;#39;quoted&amp;#39; items are lexical tokens. - Capitalized names denote grammar productions. - (...) implies grouping. - x | y means either x or y.</description></item><item><title>Data types</title><link>https://ascode.run/docs/starlark/data-types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ascode.run/docs/starlark/data-types/</guid><description>Overview These are the main data types built in to the interpreter:
NoneType # the type of None bool # True or False int # a signed integer of arbitrary magnitude float # an IEEE 754 double-precision floating point number string # a byte string list # a modifiable sequence of values tuple # an unmodifiable sequence of values dict # a mapping from values to values set # a set of values function # a function implemented in Starlark builtin_function_or_method # a function or method implemented by the interpreter or host application Some functions, such as the iteration methods of string, or the range function, return instances of special-purpose types that don&amp;rsquo;t appear in this list.</description></item><item><title>Name binding and variables</title><link>https://ascode.run/docs/starlark/name-binding-and-variables/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ascode.run/docs/starlark/name-binding-and-variables/</guid><description>After a Starlark file is parsed, but before its execution begins, the Starlark interpreter checks statically that the program is well formed. For example, break and continue statements may appear only within a loop; a return statement may appear only within a function; and load statements may appear only outside any function.
Name resolution is the static checking process that resolves names to variable bindings. During execution, names refer to variables.</description></item><item><title>Value concepts</title><link>https://ascode.run/docs/starlark/value-concepts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ascode.run/docs/starlark/value-concepts/</guid><description>Overview Starlark has eleven core data types. An application that embeds the Starlark intepreter may define additional types that behave like Starlark values. All values, whether core or application-defined, implement a few basic behaviors:
str(x) -- return a string representation of x type(x) -- return a string describing the type of x bool(x) -- convert x to a Boolean truth value Identity and mutation Starlark is an imperative language: programs consist of sequences of statements executed for their side effects.</description></item><item><title>Expressions</title><link>https://ascode.run/docs/starlark/expressions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ascode.run/docs/starlark/expressions/</guid><description>Overview An expression specifies the computation of a value.
The Starlark grammar defines several categories of expression. An operand is an expression consisting of a single token (such as an identifier or a literal), or a bracketed expression. Operands are self-delimiting. An operand may be followed by any number of dot, call, or slice suffixes, to form a primary expression. In some places in the Starlark grammar where an expression is expected, it is legal to provide a comma-separated list of expressions denoting a tuple.</description></item><item><title>Statements</title><link>https://ascode.run/docs/starlark/statements/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ascode.run/docs/starlark/statements/</guid><description>Overview Statement = DefStmt | IfStmt | ForStmt | SimpleStmt . SimpleStmt = SmallStmt {&amp;#39;;&amp;#39; SmallStmt} [&amp;#39;;&amp;#39;] &amp;#39;\n&amp;#39; . SmallStmt = ReturnStmt | BreakStmt | ContinueStmt | PassStmt | AssignStmt | ExprStmt | LoadStmt . Pass statements A pass statement does nothing. Use a pass statement when the syntax requires a statement but no behavior is required, such as the body of a function that does nothing.
PassStmt = &amp;#39;pass&amp;#39; .</description></item><item><title>Module execution</title><link>https://ascode.run/docs/starlark/module-execution/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ascode.run/docs/starlark/module-execution/</guid><description>Each Starlark file defines a module, which is a mapping from the names of global variables to their values. When a Starlark file is executed, whether directly by the application or indirectly through a load statement, a new Starlark thread is created, and this thread executes all the top-level statements in the file. Because if-statements and for-loops cannot appear outside of a function, control flows from top to bottom.
If execution reaches the end of the file, module initialization is successful.</description></item><item><title>Built-in constants and functions</title><link>https://ascode.run/docs/starlark/built-in-constants-and-functions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ascode.run/docs/starlark/built-in-constants-and-functions/</guid><description>Overview The outermost block of the Starlark environment is known as the &amp;ldquo;predeclared&amp;rdquo; block. It defines a number of fundamental values and functions needed by all Starlark programs, such as None, True, False, and len, and possibly additional application-specific names.
These names are not reserved words so Starlark programs are free to redefine them in a smaller block such as a function body or even at the top level of a module.</description></item><item><title>Built-in methods</title><link>https://ascode.run/docs/starlark/built-in-methods/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ascode.run/docs/starlark/built-in-methods/</guid><description>Overview This section lists the methods of built-in types. Methods are selected using dot expressions. For example, strings have a count method that counts occurrences of a substring; &amp;quot;banana&amp;quot;.count(&amp;quot;a&amp;quot;) yields 3.
As with built-in functions, built-in methods accept only positional arguments except where noted. The parameter names serve merely as documentation.
dict·clear D.clear() removes all the entries of dictionary D and returns None. It fails if the dictionary is frozen or if there are active iterators.</description></item><item><title>Dialect differences</title><link>https://ascode.run/docs/starlark/dialect-differences/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ascode.run/docs/starlark/dialect-differences/</guid><description>The list below summarizes features of the Go implementation that are known to differ from the Java implementation of Starlark used by Bazel. Some of these features may be controlled by global options to allow applications to mimic the Bazel dialect more closely. Our goal is eventually to eliminate all such differences on a case-by-case basis. See Starlark spec issue 20.
Integers are represented with infinite precision. Integer arithmetic is exact.</description></item><item><title>GitHub Action</title><link>https://ascode.run/docs/github-action/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ascode.run/docs/github-action/</guid><description>TODO</description></item><item><title/><link>https://ascode.run/docs/_home/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ascode.run/docs/_home/</guid><description>AsCode allows you to describe your infrastructure using an expressive language in Terraform without writing a single line of HCL.</description></item><item><title>built-in</title><link>https://ascode.run/docs/reference/types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ascode.run/docs/reference/types/</guid><description>Overview Functions def backend .backend(type) Backend Instantiates a new Backend
Arguments name type description type string Backend type. def evaluate .evaluate(filename, predeclared=None) dict Evaluates a Starlark file and returns its global context. Kwargs may be used to set predeclared.
Arguments name type description filename string Name of the file to execute. predeclared dict Defines the predeclared context for the execution.</description></item><item><title>encoding/base64</title><link>https://ascode.run/docs/reference/base64/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ascode.run/docs/reference/base64/</guid><description>base64 defines base64 encoding &amp;amp; decoding functions,often used to represent binary as text.</description></item><item><title>encoding/csv</title><link>https://ascode.run/docs/reference/csv/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ascode.run/docs/reference/csv/</guid><description>csv reads comma-separated values files</description></item><item><title>encoding/json</title><link>https://ascode.run/docs/reference/json/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ascode.run/docs/reference/json/</guid><description>json provides functions for working with json data</description></item><item><title>encoding/yaml</title><link>https://ascode.run/docs/reference/yaml/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ascode.run/docs/reference/yaml/</guid><description>yaml provides functions for working with yaml data</description></item><item><title>http</title><link>https://ascode.run/docs/reference/http/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ascode.run/docs/reference/http/</guid><description>http defines an HTTP client implementation</description></item><item><title>os</title><link>https://ascode.run/docs/reference/os/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ascode.run/docs/reference/os/</guid><description>os provides a platform-independent interface to operating system functionality.</description></item><item><title>path/filepath</title><link>https://ascode.run/docs/reference/filepath/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ascode.run/docs/reference/filepath/</guid><description>filepath implements utility routines for manipulating filename paths in away compatible with the target operating system-defined file path</description></item><item><title>re</title><link>https://ascode.run/docs/reference/re/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ascode.run/docs/reference/re/</guid><description>re defines regular expression functions, it&amp;rsquo;s intended to be a drop-insubset of python&amp;rsquo;s re module for starlark: &lt;a href="https://docs.python.org/3/library/re.html">https://docs.python.org/3/library/re.html&lt;/a></description></item></channel></rss>